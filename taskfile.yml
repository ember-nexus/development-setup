version: '3'

env:
  repositories:
    - name: "api"
      github: ember-nexus/api
      location: "api/api"
      cli:
        shell: "bash"
        container: "api"
    - name: "reference-dataset"
      github: ember-nexus/reference-dataset
      location: "api/reference-dataset"
    - name: "cypher-data-structures"
      github: neo4j-php/cypher-data-structures
      location: "api/cypher-data-structures"
    - name: "cypher-entity-manager"
      github: neo4j-php/cypher-entity-manager
      location: "api/cypher-entity-manager"
    - name: "elastic-data-structures"
      github: Syndesi/elastic-data-structures
      location: "api/elastic-data-structures"
    - name: "elastic-entity-manager"
      github: Syndesi/elastic-entity-manager
      location: "api/elastic-entity-manager"
    - name: "mongo-entity-manager"
      github: Syndesi/mongo-entity-manager
      location: "api/mongo-entity-manager"
    - name: "mongo-data-structures"
      github: Syndesi/mongo-data-structures
      location: "api/mongo-data-structures"
    - name: "web-sdk"
      github: ember-nexus/web-sdk
      location: "frontend/web-sdk"
    - name: "uix"
      github: ember-nexus/uix
      location: "frontend/uix"
    - name: "app-plugin-experimental"
      github: ember-nexus/app-plugin-experimental
      location: "frontend/app-plugin-experimental"
    - name: "app-web"
      github: ember-nexus/app-web
      location: "frontend/app-web"
    - name: "governance"
      github: ember-nexus/governance
      location: "other/governance"
    - name: "python-sdk"
      github: ember-nexus/python-sdk
      location: "python/python-sdk"

tasks:

  default:
    desc: Default help output.
    cmds:
      - task --list


  up:
    desc: Start docker compose setup.
    silent: true
    interactive: true
    cmd: |
      docker compose up -d

  down:
    desc: Stop docker compose setup.
    silent: true
    interactive: true
    cmd: |
      docker compose down

  restart:
    desc: Restart docker compose setup.
    silent: true
    cmds:
      - task: down
      - task: up

  status:
    desc: Stop docker compose setup.
    silent: true
    cmd: |
      docker compose ps --format json | \
      jq --slurp -r '(["Group", "Short Name", "Image", "Status"], (.[] | .Group = (.Service | split("-") | .[2]) | .ShortName = (.Service | split("-") | .[3:] | join("-") | if . == "" then "-" else . end) | [.Group, .ShortName, .Image, .Status])) | @csv' | \
      duckdb -column -c "SELECT * FROM read_csv('/dev/stdin', all_varchar=true)"

  cli-test:
    desc: Cli test.
    silent: true
    cmd: |
      cd api/api
      cliTool=$(task cli-tool)
      echo "$cliTool"

  cli:
    desc: Starts cli to container.
    silent: true
    interactive: true
    cmd: |
      docker exec -it ember-nexus-api bash

  api-test-feature:
    desc: Runs feature tests inside the api container.
    silent: true
    cmd: |
      docker exec -it ember-nexus-api composer test:feature

  frontend-install:
    desc: Installs dependencies for all frontend repositories.
    silent: true
    cmd: |
      echo "Installing dependencies for web-sdk:"
      docker exec -it ember-nexus-frontend-node bash -c "cd web-sdk && yarn install"
      echo "Installing dependencies for uix:"
      docker exec -it ember-nexus-frontend-node bash -c "cd uix && yarn install"
      echo "Installing dependencies for app-plugin-experimental:"
      docker exec -it ember-nexus-frontend-node bash -c "cd app-plugin-experimental && yarn install"
      echo "Installing dependencies for app-web/pwa:"
      docker exec -it ember-nexus-frontend-node bash -c "cd app-web/pwa && yarn install"

  frontend-web-sdk-build:
    desc: Builds the web-sdk package.
    silent: true
    cmd: |
      docker exec -it ember-nexus-frontend-node bash -c "cd web-sdk && yarn build"

  frontend-uix-build:
    desc: Builds the uix package.
    silent: true
    cmd: |
      docker exec -it ember-nexus-frontend-node bash -c "cd uix && yarn build"

  frontend-app-plugin-experimental-build:
    desc: Builds the app-plugin-experimental package.
    silent: true
    cmd: |
      docker exec -it ember-nexus-frontend-node bash -c "cd app-plugin-experimental && yarn build"

  frontend-app-web-pwa-build:
    desc: Builds the app-web/pwa package.
    silent: true
    cmd: |
      docker exec -it ember-nexus-frontend-node bash -c "cd app-web/pwa && yarn build"

  frontend-build:
    desc: Builds dependencies for all frontend repositories.
    silent: true
    deps:
      - frontend-web-sdk-build
      - frontend-uix-build
      - frontend-app-plugin-experimental-build
      - frontend-app-web-pwa-build










  setup:
    desc: Check required dependencies and clones all Ember Nexus repositories.
    cmds:
      - task: check-docker-is-installed
      - task: check-docker-compose-is-installed
      - task: clone-repositories

  repo-checkout-pull-main:
    desc: Checks out the main branch of every repository, given it does not have uncommited changes.
    silent: true
    cmds:
      - for: { var: repositories }
        cmd: |
          (
            if [ ! -d "{{.ITEM.location}}" ]; then
              echo "Repository {{.ITEM.github}} is not yet cloned to location {{.ITEM.location}}."
              exit 0
            fi
            cd "{{.ITEM.location}}"
            if [[ `git status --porcelain` ]]; then
              echo "Skipped repository {{.ITEM.github}} due to uncommited changes."
            fi
            echo "Repository {{.ITEM.github}} at location {{.ITEM.location}}:"
            if [[ ! `git rev-parse --abbrev-ref HEAD` == "main" ]]; then
              git checkout main
            fi
            git pull
          )
          echo ""

  repo-ls:
    desc: List repositories and their git version.
    silent: true
    cmd: |
      title='"location","GitHub repository","branch","unsaved changes?"'
      content=$(task repo-ls-raw | jq --slurp -r '.[] | [.location, .github, .branch, .unsavedChanges] | @csv')
      csv=$(echo "$title"; echo "$content")
      echo "$csv" | duckdb -column -c "SELECT * FROM read_csv('/dev/stdin', all_varchar=true)"

  repo-ls-raw:
    silent: true
    cmds:
      - for: { var: repositories }
        cmd: |
          (
            if [ ! -d "{{.ITEM.location}}" ]; then
              echo "{\"location\": \"-\", \"github\": \"{{.ITEM.github}}\", \"branch\": \"-\", \"unsavedChanges\": \"-\"}"
              exit 0
            fi
            cd "{{.ITEM.location}}"
            branch=$(git rev-parse --abbrev-ref HEAD)
            unsavedChanges="no"
            if [[ `git status --porcelain` ]]; then
              unsavedChanges="yes"
            fi
            echo "{\"location\": \"{{.ITEM.location}}\", \"github\": \"{{.ITEM.github}}\", \"branch\": \"${branch}\", \"unsavedChanges\": \"${unsavedChanges}\"}"
          )

  repo-updates:
    desc: Show whether repositories have updates in their remote branches.
    silent: true
    cmd: |
      title='"location","GitHub repository","branch","unsaved changes?","branch up to date?"'
      content=$(task repo-updates-raw | jq --slurp -r '.[] | [.location, .github, .branch, .unsavedChanges, .branchUpToDate] | @csv')
      csv=$(echo "$title"; echo "$content")
      echo "$csv" | duckdb -column -c "SELECT * FROM read_csv('/dev/stdin', all_varchar=true)"

  repo-updates-raw:
    silent: true
    cmds:
      - for: { var: repositories }
        cmd: |
          (
            if [ ! -d "{{.ITEM.location}}" ]; then
              echo "{\"location\": \"-\", \"github\": \"{{.ITEM.github}}\", \"branch\": \"-\", \"unsavedChanges\": \"-\", \"branchUpToDate\": \"-\"}"
              exit 0
            fi
            cd "{{.ITEM.location}}"
            branch=$(git rev-parse --abbrev-ref HEAD)
            unsavedChanges="no"
            if [[ `git status --porcelain` ]]; then
              unsavedChanges="yes"
            fi
            git fetch &> /dev/null
            branchUpToDate="no"
            if [[ `git status -uno` == *"Your branch is up to date with"* ]]; then
              branchUpToDate="yes"
            fi
            echo "{\"location\": \"{{.ITEM.location}}\", \"github\": \"{{.ITEM.github}}\", \"branch\": \"${branch}\", \"unsavedChanges\": \"${unsavedChanges}\", \"branchUpToDate\": \"${branchUpToDate}\"}"
          )

  check-docker-is-installed:
    internal: true
    silent: true
    cmd: |
      if [ -x "$(command -v docker)" ]; then
        echo "[OK] docker is installed"
      else
        echo "[ERROR] unable to find docker, please install it."
        echo "        see tutorial here: https://www.digitalocean.com/community/tutorials/how-to-install-and-use-docker-on-ubuntu-22-04"
        exit 1
      fi

  check-docker-compose-is-installed:
    internal: true
    silent: true
    cmd: |
      if $(docker compose &>/dev/null) && [ $? -eq 0 ]; then
        echo "[OK] docker compose is installed"
      else
        echo "[ERROR] unable to find docker compose, please install it."
        echo "        see tutorial here: https://docs.docker.com/compose/install/linux/"
        exit 1
      fi

  clone-repositories:
    internal: true
    silent: true
    cmds:
      - for: { var: repositories }
        cmd: |
          if [ -d "{{.ITEM.location}}" ]; then
            echo "Repository {{.ITEM.name}} at location {{.ITEM.location}} is already installed."
            exit 0
          fi
          mkdir -p "./{{.ITEM.location}}"
          echo "[WIP] cloning {{.ITEM.name}}..."
          git clone "git@github.com:{{.ITEM.github}}.git" "./{{.ITEM.location}}"
